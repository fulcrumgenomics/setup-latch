name: 'Setup Latch'
author: Nils Homer (@nh13)
description: 'Set up Latch SDK'

branding:
  icon: "code"
  color: "green"

inputs:
  latch-version:
    description: 'The version of latch to install (see https://pypi.org/project/latch/).'
    required: false
    default: "latest"
  latch-workspace:
    description: 'Workspace id (see ~/.latch/workspace), typically numeric.'
    required: false
    default: ""
  latch-token:
    description: 'Latch token (see ~/.token). Please store this in a secret!'
    required: false
    default: ""
  ssh-config:
    description: "Set up the ~/.ssh directory."
    required: false
    default: true
  register:
    description: "Register repository workflow code to Latch. Visit docs.latch.bio to learn more."
    required: false
    default: false
  register-pkg-root:
    description: "The relative path to the root of the package to register"
    required: false
    default: "."
  register-remote:
    description: "Use a remote server to build workflow."
    required: false
    default: true
  register-disable-auto-version:
    description: "Whether to automatically bump the version of the workflow each time register is called."
    required: false
    default: false
  already-registered-do-not-fail:
    description: "Whether the workflow should fail if the worfklow is already registered."
    required: false
    default: false

outputs:
  latch-version:
    description: "The installed latch version."
    value: ${{ steps.latch-version.outputs.latch-version }}
  register-version:
    description: "The workflow version that was registered.  Only set when 'inputs.register' is 'true'."
    value: ${{ steps.latch-register.outputs.register-version }}
  already-registered:
    description: "'true' if the workflow was already registered, 'false' otherwise.  Only set when 'inputs.register' is 'true'."
    value: ${{ steps.after-latch-register.outputs.already-registered }}
runs:
  using: "composite"
  steps:
    - id: setup-ssh-config
      name: Setup SSH Config
      if: ${{ inputs.ssh-config == 'true' }}
      shell: bash
      run: |
        mkdir -p ~/.ssh
        echo 'Host *' >> ~/.ssh/config
        echo '    StrictHostKeyChecking no' >> ~/.ssh/config
        chmod 600 ~/.ssh/config
    - id: setup-workspace
      name: Setup the Latch Workspace
      if: ${{ inputs.latch-workspace != '' }}
      shell: bash
      run: |
        mkdir -p ~/.latch
        echo -n "${{ inputs.latch-workspace }}" > ~/.latch/workspace
    - id: setup-token
      name: Setup the Latch Token
      if: ${{ inputs.latch-token != '' }}
      shell: bash
      run: |
        mkdir -p ~/.latch
        echo -n "${{ inputs.latch-token }}" > ~/.latch/token
    - id: install-latch
      name: Install Latch
      shell: bash
      run: |
        if [ "latest" == "${{ inputs.latch-version }}" ]; then
          python3 -m pip install --upgrade latch
        else
          python3 -m pip install latch==${{ inputs.latch-version }}
        fi
    - id: latch-version
      name: Get the installed Latch version
      shell: bash
      run: |
        echo "latch-version=$(latch --version | cut -f 3 -d ' ')" >> $GITHUB_OUTPUT
    - id: latch-register
      name: Register the Workflow on Latch
      if: ${{ inputs.register == 'true' }}
      shell: bash
      continue-on-error: true
      run: |
          eval `ssh-agent -s`
          args="${{ inputs.register-pkg-root }}"
          if [ "${{ inputs.register-remote }}" == "true" ]; then
            args="--remote ${args}"
          fi
          if [ "${{ inputs.register-register-disable-auto-version }}" == "true" ]; then
            args="--register-disable-auto-version ${args}"
          fi
          latch register --yes ${args} 2>&1 | tee register.log
          # save registered version; this may not occur if the above register fails
          register_version=$(grep "Registering" register.log | tail -1 | cut -f 2 -d ' ' | cut -f 2 -d ':')
          echo "register-version=${register_version}" >> $GITHUB_OUTPUT
    - id: after-latch-register
      name: Post-process Latch Workflow Registration
      if: ${{ inputs.register == 'true' }}
      shell: bash
      run: |
          # Deal with successful registration
          if [[ "${{ steps.latch-register.outcome }}" == "success" ]]; then
             echo Registered version ${{ steps.latch-register.outputs.register-version }}
             echo "already-registered=false" >> $GITHUB_OUTPUT
             exit 0
          fi
      
          # Deal with registration failure
          spacer_line="------------------------------------------------------------"; 
          already_registered="false"
          
          # Print environment information (e.g. installed latch version, OS, etc.)
          if [ -f .latch-report.tar.gz ]; then
            echo "Printing environment information:"
            tar -Ozxvf .latch_report.tar.gz metadata.json 2>/dev/null
          else
            echo "No .latch_report.tar.gz found! Continuing..."
          fi  
          # Turn this off so grep works
          set +eo pipefail
          # Find the line in the log to start printing from.
          pattern="Unable to register workflow";
          result=$(grep "${pattern}" "register.log" || echo "");
          echo -e "${spacer_line}"
          echo "Printing error traceback:"
          if [[ "${result}" == "" ]]; then
            # If no such line exists, then just print the last forty lines
            tail -n 40 "register.log";
            echo -e "${spacer_line}"
            echo "Unknown error!"
          else
            # Print error information
            sed -n "/${pattern}/"',$p' "register.log"
            echo -e "${spacer_line}"
            echo -n "Error: "
            tail -4 "register.log" | head -1 | cut -f 2- -d ' '
          fi
          
          # check if already registered
          pattern="has already been registered."
          result=$(grep "${pattern}" "register.log" || echo "");
          if [[ "${result}" != "" ]]; then
            already_registered="true"
          fi
          # save result
          echo "already-registered=${already_registered}" >> $GITHUB_OUTPUT
          # check if we should fail when the image was already registered
          if [[ "${{ inputs.already-registered-do-not-fail }}" == "true" ]] && [[ "${already_registered}" == "true" ]]; then
            exit 0;
          fi
          # fail otherwise
          exit 1

